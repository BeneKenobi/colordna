name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v ./...

    - name: Run go vet
      run: go vet ./...

    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted properly:"
          gofmt -s -l .
          exit 1
        fi

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        # Set binary name with proper extension for Windows
        BINARY_NAME="colordna"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        # Create output directory
        OUTPUT_DIR="dist/${{ matrix.goos }}_${{ matrix.goarch }}"
        mkdir -p $OUTPUT_DIR
        
        # Build the binary
        go build -ldflags="-s -w -X 'main.buildTime=$(date)' -extldflags '-static'" -o $OUTPUT_DIR/$BINARY_NAME ./
        
        # Create archive
        cd $OUTPUT_DIR
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip -r colordna_${{ matrix.goos }}_${{ matrix.goarch }}.zip ./$BINARY_NAME
        else
          tar -czf colordna_${{ matrix.goos }}_${{ matrix.goarch }}.tar.gz ./$BINARY_NAME
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: colordna_${{ matrix.goos }}_${{ matrix.goarch }}
        path: |
          dist/${{ matrix.goos }}_${{ matrix.goarch }}/colordna_${{ matrix.goos }}_${{ matrix.goarch }}.*
